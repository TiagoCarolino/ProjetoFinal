@page "/createproduct"

@using ProjetoFinalAPI.Models;
@using Interfaces;
@using System.Diagnostics;
@using ProjetoFinal.Services;

@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h3>CreateProduct</h3>

<EditForm Model="@NewProduct" OnValidSubmit="CreateNewProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@NewProduct.Name" />
    </div>

    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" class="form-control" @bind-Value="@NewProduct.Price" step="0.01" />
    </div>

    <div class="form-group">
    <label for="category">Category:</label>
    <br />
    <select bind="Category">
        @foreach (var o in Options)
        {
            <option value="@o.Value">@o.Value</option>
        }
    </select>
    </div>
   
    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" class="form-control" @bind-Value="@NewProduct.Description" />
    </div>
    <p></p>
    <button type="submit" class="btn btn-primary">Criar</button>
</EditForm>


@code {


    List<Product> ProductsData { get; set; } = new();

    Product NewProduct { get; set; } = new Product();

    public ProductsCategory Category { get; set; }

    public IList<SelectOption> Options { get; set; }

   
    protected override void OnInitialized()
    {
        Options = EnumService.GetOptions<ProductsCategory>();
        base.OnInitialized();
    }


    private async Task CreateNewProduct()
    {
        try
        {
            var response = await WebServiceAPI.CreateProduct(NewProduct);
            ProductsData.Add(response);
            NewProduct = new Product();
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}