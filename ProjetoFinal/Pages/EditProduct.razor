@page "/editproduct/{id:int}"

@using ProjetoFinalAPI.Models;
@using Interfaces;
@using System.Diagnostics;
@using ProjetoFinal.Services;

@inject IWebServiceAPI WebServiceAPI
@inject NavigationManager NavigationManager

<h3>EditProduct</h3>

@if (ProductData is not null)
{
    <EditForm Model="@ProductData" OnValidSubmit="UpdateProduct">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="@ProductData.Name" />
        </div>

        <div class="form-group">
            <label for="price">Price:</label>
            <InputNumber id="price" class="form-control" @bind-Value="@ProductData.Price" step="0.01" />
        </div>
        <div class="form-group">
            <label for="category">Category:</label>
            <br>
            <select bind="Category">
                @foreach (var o in Options)
                {
                    <option value="@o.Value">@o.Value</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="price">Quantity:</label>
            <InputNumber id="quantitystock" class="form-control" @bind-Value="@ProductData.QuantityStock" />
        </div>
        <div class="form-group">
            <label for="description">Description:</label>
            <InputTextArea id="description" class="form-control" @bind-Value="@ProductData.Description" />
        </div>
        <p></p>
        <button type="submit" class="btn btn-primary">Update</button>
    </EditForm>

}

@code {

    [Parameter]
    public int Id { get; set; }

    Product ProductData { get; set; } = new();

    public ProductsCategory Category { get; set; }

    public IList<SelectOption> Options { get; set; }


    protected override async Task OnInitializedAsync()
    {

        Options = EnumService.GetOptions<ProductsCategory>();
        base.OnInitialized();

        try
        {
            ProductData = await WebServiceAPI.GetProduct(Id);
        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }

    public async void UpdateProduct()
    {
        try
        {
            var newProduct = new Product
                {

                    Name = ProductData.Name,
                    Description = ProductData.Description,
                    Category = ProductData.Category,
                    QuantityStock = ProductData.QuantityStock,
                    Price = ProductData.Price,
                    IsDeleted = ProductData.IsDeleted
                };

            var response = await WebServiceAPI.UpdateProduct(newProduct, Id);


        }
        catch (Exception ex)
        {
            Debug.WriteLine(ex);
            throw;
        }
    }
}
